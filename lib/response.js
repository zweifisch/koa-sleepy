class Response {
    constructor(status, message) {
        this.status = status
        this.message = message
    }
}

const response = code => message => new Response(code, message)

exports.Response = Response

exports.Ok = response(200)
exports.Created = response(201)
exports.Accepted = response(202)
exports.NoContent = response(204)
exports.BadRequest = response(400)
exports.Unauthorized = response(401)
exports.PaymentRequired = response(402)
exports.Forbidden = response(403)
exports.NotFound = response(404)
exports.MethodNotAllowed = response(405)
exports.NotAcceptable = response(406)
exports.ProxyAuthenticationRequired = response(407)
exports.RequestTimeout = response(408)
exports.Conflict = response(409)
exports.Gone = response(410)
exports.LengthRequired = response(411)
exports.PreconditionFailed = response(412)
exports.PayloadTooLarge = response(413)
exports.URITooLong = response(414)
exports.UnsupportedMediaType = response(415)
exports.RangeNotSatisfiable = response(416)
exports.ExpectationFailed = response(417)
exports.ImATeapot = response(418)
exports.MisdirectedRequest = response(421)
exports.UnprocessableEntity = response(422)
exports.Locked = response(423)
exports.FailedDependency = response(424)
exports.UnorderedCollection = response(425)
exports.UpgradeRequired = response(426)
exports.PreconditionRequired = response(428)
exports.TooManyRequests = response(429)
exports.RequestHeaderFieldsTooLarge = response(431)
exports.UnavailableForLegalReasons = response(451)
exports.InternalServerError = response(500)
exports.NotImplemented = response(501)
exports.BadGateway = response(502)
exports.ServiceUnavailable = response(503)
exports.GatewayTimeout = response(504)
exports.HTTPVersionNotSupported = response(505)
exports.VariantAlsoNegotiates = response(506)
exports.InsufficientStorage = response(507)
exports.LoopDetected = response(508)
exports.BandwidthLimitExceeded = response(509)
exports.NotExtended = response(510)
exports.NetworkAuthenticationRequired = response(511)
